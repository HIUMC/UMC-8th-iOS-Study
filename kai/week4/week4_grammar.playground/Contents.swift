/*
 
 👾함수
 특정 작업을 수행하는 코드 모음 형태
 작업을 수행하기 위해 함수를 '호출'한다
 👾정의하고 호출하기
 파라미터를 받아 반환값을 전달하는 형식
 파라미터: 입력으로 받는 하나 이상의 타입으로 된 값을 선택적으로 정의
 반환타입: 작업이 완료 되었을 때 함수가 다시 전달하는 값의 타입을 선택적으로 정의
 => 함수 정의 시 파라미터와 반환 타입을 명시해주어야 한다
 
 func 함수이름(파라미터 이름: 파라미터 타입) -> 파라미터 타입{
    함수 기능 작성
    return 반환값
 }
 
 print(함수이름(파라미터이름: 타입 값)) //호출
 
 
 
 👾클로저: 변수나 상수 등으로 저장 가능한 형태(일급 객체)
 객체를 인자값, 반환값으로 사용 및 전달 가능해야 함
 데이터 구조 안에 저장 가능해야 함
 함수 : 클로저의 케이스
 
 func + 이름 = 클로저 이면서 함수
 둘 다 없음 = 클로저
 
 👾표현
 let payment = { (user: String, amount: Int) in
 }
 
 { <parameter> -> <return type> in
    <statements>
 }
 파라미터, 반환 타입, 내용으로 구성된다
 **클로저에서는 따로 파라미터의 이름을 명시하지 않는다! 이름 없이 인자값만 입력해주면 된다
 
 👾클래스
 관련된 속성과 메서드를 하나로 묶는 청사진
 : 데이터를 캡슐화하고 기능을 구현, 복잡한 프로그램 구조적으로 설계
 사용자 정의 타입의 일종
 
 class 키워드를 사용해 정의
 속성, 메스더 포함 가능 => 객체의 상태와 동작을 정의한다
 
 👾클래스 기반의 인스턴스를 생성 가능
 클래스 이름 사용, 이니셜라이저 호출
 클래스의 모든 속성이 초기화 될 준비가 되어 있어야 인스턴스를 생성 가능
 만약 주어진 속성에 기본값이 없는 경우? init()을 직접 선언해줘야함!
 👾클래스 속성
 : 객체의 상태를 나타내는 변수 또는 상수
 클래스 내부에 정의
 - 저장 속성: 값을 저장하고 관리하는 속성
 - 계산 속서이 실제 값을 저장하지는 앟ㄴ고, 다른 속성이나 연산을 통해 값을 계산
 👾클래스 메서드
 : 특정 작업을 수행하는 함수 -> 클래스 인스턴스를 통해 호출 가능함
 - 인스턴스 메서드: 인스턴스 속성을 사용하는 메서드
 - 타입 메서드: 클래스 자체와 연관된 작업을 수행
 
 
 👾클래스 초기화
 객체를 생성할 때 객체의 초기 상태를 설정하는 과정
 - 각 속성에 초기값을 할당하거나, 이니셜라이저로 인스턴스를 초기화
 이니셜라이저는 클래스 인스턴스가 생성될 대 호출, 속성에 기본 값을 설정하고 필요한 초기 설정 수행
 
 기본 이니셜라이저
 변수 = 클래스이름()
 
 커스텀 이니셜라이저
 매개변수 O
 init 키워드 사용
 
 👾초기화실패
 특정 조건을 만족하지 못하면 초기화에 실패할 수도 있다
 -> 실패 가능 이니셜라이저 사용!
 초기화에 실패할 수 있는 경우를 대비한 이니셜라이저: init? 형식
 
 👾이니셜라이저 위임
 클래스의 이니셜라이저에서 다른 이니셜라이저를 호출하여 속성을 초기화
 코드 중복성을 줄이고, 명확한 초기화 구성 가능
 
 - 상속 계층 위임
 하위 클래스의 초기화 도중, 상위 클래스의 초기화를 반드시 먼저 긑내야 한다!
 부모 클래스의 프로퍼티를 자식 클래스에서는 초기화 불가
 부모 클래스가 직접 초기화하도록 해야한다
 
 자식 클래스의 자신의 저장 프로퍼티 초기화 -> super.init()로 부모 클래스의 저장 프로퍼티 초기화
 
 👾클래스와 상속
 상속: 코드 재사용성 상승, 클래스 간 계층구조 정의
 한 클래스가 다른 클래스의 속성과 메서드를 물려받아야 사용할 수 있다
 
 class 부모 클래스 {

 }

 class 자식 클래스: 부모 클래스 {

 }
 
 상속 방지? final 키워드 사용
 
 👾메서드, 속성 재정의
 서브클래스에서 부모 클래스의 속성이나 메서드 재정의 가능
 override 키워드를 사용해 재정의할 수 있음을 명시해야함
 super 키워드를 통해 부모 클래스의 메서드나 속성에 접근
 
 👾접근 제어
 코드 내에서 클래스, 속성, 메서드, 함수, 이니셜라이저 등에 대한 접근 권한을 제한
 모듈성과 데이터 은닉을 강화
 
 open: 모든 외부에서 접근 가능, 클래스와 메서드의 상속 및 재정의 가능
 public: 모든 외부에서 접근 가능, 클래스 상속 및 재정의 불가
 internal: 같은 모듈 내에서만 접근 가능, 모듈 외부에서는 접근 불가(기본 수준, 명시 하지 않았을 때 디폴트(
 flieprivate: 같은 파일 내에서만 접근 가능
 private: 같은 선언 내에서만 접근 가능
 
 👾클래스 확장
 기존 클래스, 구조체, 열거형, 프로토콜에 새로운 기능을 추가
 원래 소스코드를 수정하지 않고도 기능을 확장할 수 있다
 extension 키워드 사용
 
 👾프로토콜 준수와 클래스 확장
 특정 클래스가 새로운 프로토콜을 준수하도록 만들거나 이미 준수하는 프로토콜의 요구사항을 구현하는 데 사용
 */



